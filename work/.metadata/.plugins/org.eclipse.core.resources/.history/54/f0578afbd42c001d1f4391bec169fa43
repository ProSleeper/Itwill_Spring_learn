package com.exe.board.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import com.exe.board.user.UserSecurityService;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	/*
	CSRF(Cross Site Request Forgery)
	웹사이트의 취약점 공격을 방지하기 위해 사용하는 기술
	스프링 시큐어리티가 CSRF 토큰 값을 발행해서
	*/
	
	private UserSecurityService userSecurityService;
	
	@Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
       	
    	//인증되지 않은 모든 요청을 허락
    	http.authorizeRequests().antMatchers("/**").permitAll()
    	.and()
    	.csrf().ignoringAntMatchers("/h2-console/**")
    	//.disable().headers().frameOptions().disable();
    	.and()
    	.headers().addHeaderWriter(new XFrameOptionsHeaderWriter(XFrameOptionsHeaderWriter.XFrameOptionsMode.SAMEORIGIN))
    	.and()
    	.formLogin().loginPage("/user/login").defaultSuccessUrl("/")
    	.and()
    	.logout().logoutRequestMatcher(new AntPathRequestMatcher("/user/logout"))
    	;
   
        return http.build();
    }
	
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}

	
	//스프링 시큐리티의 인증을 담당
	//AuthenticationManager의 Bean생성시 스프링의 내부동작으로 인해
	//UserSecurityService와 PasswordEncoder(암호화)가 자동으로 설정이 된다.
	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
		return authenticationConfiguration.getAuthenticationManager();
	}

}


















