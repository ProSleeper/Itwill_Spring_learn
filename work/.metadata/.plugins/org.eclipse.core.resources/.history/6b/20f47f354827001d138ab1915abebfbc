package com.exe.springJdbcTemplate;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;

public class CustomDAO2 {

	private JdbcTemplate jdbcTemplate;

	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}

	public void insertData(CustomDTO dto) {

		StringBuilder sql = new StringBuilder();

		sql.append("insert into custom (id, name, age) values(?, ?, ?)");

		//스프링에서 jdbc 사용법
		jdbcTemplate.update(sql.toString(), dto.getId(), dto.getName(), dto.getAge());

	}

	public List<CustomDTO> getList(){

		StringBuilder sql = new StringBuilder();

		sql.append("select id, name, age from custom");

		CustomDTO dto = new CustomDTO();

		dto.setId(rs.getInt("id"));
		dto.setName(rs.getString("name"));
		dto.setAge(rs.getInt("age"));




		return lists;

	}

	public CustomDTO getReadData(int id){
		CustomDTO dto = null;
		ResultSet rs = null;
		PreparedStatement pstmt = null;
		String sql;

		try {

			conn = dataSource.getConnection();

			sql = "select id, name, age from custom where id = ?";


			pstmt = conn.prepareStatement(sql);

			pstmt.setInt(1,  id);

			rs = pstmt.executeQuery();

			while (rs.next()) {

				dto = new CustomDTO();

				dto.setId(rs.getInt("id"));
				dto.setName(rs.getString("name"));
				dto.setAge(rs.getInt("age"));

			}


			conn.close();
			pstmt.close();


		} catch (Exception e) {
			// TODO: handle exception
		}


		return dto;

	}



	public int updateData(CustomDTO dto) {
		int result = 0;
		PreparedStatement pstmt = null;
		String sql;

		try {

			sql = "update custom set name = ?, age = ? where id = ?";
			conn = dataSource.getConnection();

			pstmt = conn.prepareStatement(sql);


			pstmt.setString(1, dto.getName());
			pstmt.setInt(2, dto.getAge());
			pstmt.setInt(3, dto.getId());

			result = pstmt.executeUpdate();


			conn.close();
			pstmt.close();


		} catch (Exception e) {
			System.out.println(e.toString());
		}


		return result;
	}


	public int deleteData(int id) {
		int result = 0;
		PreparedStatement pstmt = null;
		String sql;

		try {

			conn = dataSource.getConnection();

			sql = "delete custom where id = ?";

			pstmt = conn.prepareStatement(sql);

			pstmt.setInt(1, id);

			result = pstmt.executeUpdate();

			pstmt.close();


		} catch (Exception e) {
			System.out.println(e.toString());
		}

		return result;
	}





















}
